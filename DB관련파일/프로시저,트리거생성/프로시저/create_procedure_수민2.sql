SELECT USER
FROM DUAL;
--==>> STITKER


--계정정지 등록 프로시저
CREATE OR REPLACE VIEW INSERT_SUSPEND_VIEW
AS
SELECT A.APPLY_CODE, A.STUDY_CODE, A.USER_CODE, W.WARNING_CODE, C.CANCEL_CODE, CASE WHEN O.END_DATE <= SYSDATE THEN NULL ELSE O.END_DATE END END_DATE
FROM TBL_ACCOUNT_SUSPEND S JOIN TBL_WARNING W -- 계정정지되는 회원의 경고코드를 통해 유저코드 가져오기
      ON S.WARNING_CODE = W.WARNING_CODE
        JOIN TBL_STUDY_APPLY A                --  유저코드를 통해 모든 참가코드 가져오기
        ON A.USER_CODE = W.USER_CODE
            JOIN TBL_STUDY_OPEN O             -- 스터디 코드를 통해 종료날짜 가져오기(아직 종료되지 않은 것만 데이터 남기고 나머지 NULL)
            ON A.STUDY_CODE = O.STUDY_CODE
                LEFT JOIN TBL_STUDY_CANCEL C  -- 취소코드 존재하는지 체크(취소 아직 안된 것만 취소하기 위함)
                ON A.APPLY_CODE = C.APPLY_CODE
WHERE C.CANCEL_CODE IS NULL;
        
CREATE OR REPLACE PROCEDURE PRC_INSERT_SUSPEND
(V_ACCT_SUS_DATE    IN  TBL_ACCOUNT_SUSPEND.ACCT_SUS_DATE%TYPE
, V_WARNING_CODE    IN  TBL_WARNING.WARNING_CODE%TYPE
)
IS
APPLY_CNT       NUMBER;
V_APPLY_CODE    TBL_STUDY_APPLY.APPLY_CODE%TYPE;
BEGIN
    -- insert
    INSERT INTO TBL_ACCOUNT_SUSPEND(ACCT_SUS_CODE, ACCT_SUS_DATE, WARNING_CODE)
    VALUES('AS'||ACCT_SUS_SEQ.NEXTVAL, V_ACCT_SUS_DATE, V_WARNING_CODE);
    
    SELECT COUNT(*) INTO APPLY_CNT
    FROM INSERT_SUSPEND_VIEW
    WHERE WARNING_CODE = V_WARNING_CODE AND END_DATE IS NOT NULL; 
    
    dbms_output.put_line(APPLY_CNT);
    
    IF(APPLY_CNT > 0)
    THEN
        FOR I IN 1 .. APPLY_CNT
        LOOP
        -- 참가코드 가져오기
        dbms_output.put_line(I);
        SELECT APPLY_CODE INTO V_APPLY_CODE
        FROM 
        ( SELECT ROWNUM RNUM, APPLY_CODE
          FROM INSERT_SUSPEND_VIEW
          WHERE WARNING_CODE = V_WARNING_CODE AND END_DATE IS NOT NULL)
        WHERE RNUM = I;    
        
        PRC_INSERT_CANCEL( V_APPLY_CODE, V_ACCT_SUS_DATE, 1);
    
        END LOOP;
    END IF;    
END;


-- 신고, 내보내기 등록 제약조건 추가
ALTER TABLE TBL_STUDY_ACCUSE
ADD CONSTRAINT STUDY_ACCUSE_SCUC_UK UNIQUE (STUDY_CODE, USER_CODE);

ALTER TABLE TBL_MEM_REPORT_REG
ADD CONSTRAINT MEM_REP_REG_TCDC_UK UNIQUE (PARTI_REPORT_CODE, PARTI_REPORTED_CODE);

ALTER TABLE TBL_MEM_KICK_REG
ADD CONSTRAINT MEM_KICK_REG_KCDC_UK UNIQUE(PARTI_KICKED_CODE, PARTI_KICK_CODE);

ALTER TABLE TBL_REPORT_REG_INFORM
ADD CONSTRAINT RPT_REG_INFO_PCUC_UK UNIQUE(POST_CODE, USER_CODE);

ALTER TABLE TBL_REPORT_REG_INTERVIEW
ADD CONSTRAINT RPT_REG_INTER_PCUC_UK UNIQUE(POST_CODE, USER_CODE);

ALTER TABLE TBL_REPORT_REG_SEMINAR
ADD CONSTRAINT RPT_REG_SEMI_PCUC_UK UNIQUE(POST_CODE, USER_CODE);

ALTER TABLE TBL_REPORT_REG_FREE
ADD CONSTRAINT RPT_REG_FREE_PCUC_UK UNIQUE(POST_CODE, USER_CODE);

ALTER TABLE TBL_REPORT_REG_QUESTION
ADD CONSTRAINT RPT_REG_QUE_PCUC_UK UNIQUE(POST_CODE, USER_CODE);

ALTER TABLE TBL_REPORT_REG_ANSWER
ADD CONSTRAINT RPT_REG_AWR_PCUC_UK UNIQUE(POST_CODE, USER_CODE);

ALTER TABLE TBL_REPORT_REG_STUDYREVIEW
ADD CONSTRAINT RPT_REG_STRV_PCUC_UK UNIQUE(POST_CODE, USER_CODE);


SET SERVEROUTPUT ON;
EXEC PRC_INSERT_SUSPEND(SYSDATE, 'WR50');

SELECT A.APPLY_CODE, C.CANCEL_CODE, C.CANCEL_DATE
FROM TBL_STUDY_APPLY A LEFT JOIN TBL_STUDY_CANCEL C
ON A.APPLY_CODE = C.APPLY_CODE
WHERE USER_CODE = 'UC7';


SELECT *
FROM INSERT_SUSPEND_VIEW;

SELECT *
FROM INSERT_SUSPEND_VIEW
WHERE WARNING_CODE ='WR50' AND END_DATE IS NOT NULL;
    
SELECT *
FROM TBL_ACCOUNT_SUSPEND;

SELECT RNUM, APPLY_CODE
FROM 
( SELECT ROWNUM RNUM, APPLY_CODE
  FROM INSERT_SUSPEND_VIEW
  WHERE WARNING_CODE = 'WR50' AND END_DATE IS NOT NULL)
;  
SELECT *
FROM TBL_STUDY_PARTICIPANT;
SELECT *
FROM TBL_STUDY_OPEN;