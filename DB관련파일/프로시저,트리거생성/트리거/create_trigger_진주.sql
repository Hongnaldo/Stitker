--■■■ 트리거(TRIGGER) 생성 ■■■--

--○ 스터디 진행 테이블 INSERT -> 모집마감일 이전에 INSERT됐는지 체크
-- -> 맞으면 스터디개설 테이블의 모집마감일을 UPDATE
CREATE OR REPLACE TRIGGER TRG_STD_PARTI_INSERT
    AFTER
    INSERT ON TBL_STUDY_PARTICIPANT
    FOR EACH ROW
DECLARE
    V_STUDY_CODE    TBL_STUDY_OPEN.STUDY_CODE%TYPE; -- 시작한 스터디 코드
    V_CLOSE_DATE    TBL_STUDY_OPEN.CLOSE_DATE%TYPE; -- 이 스터디의 원래 모집 마감일
BEGIN
    SELECT STUDY_CODE INTO V_STUDY_CODE
    FROM TBL_STUDY_APPLY
    WHERE APPLY_CODE = :NEW.APPLY_CODE; 
      
    SELECT CLOSE_DATE INTO V_CLOSE_DATE
    FROM TBL_STUDY_OPEN
    WHERE STUDY_CODE = V_STUDY_CODE;
    
    IF ( TO_DATE(SYSDATE, 'YYYY-MM-DD') < TO_DATE(V_CLOSE_DATE, 'YYYY-MM-DD') )
        THEN UPDATE TBL_STUDY_OPEN
             SET CLOSE_DATE = SYSDATE
             WHERE STUDY_CODE = V_STUDY_CODE;
             
    END IF;
    
END;



--○ 스터디 개설 테이블에 INSERT 수행 전 -> 
--  MAX_MEM이 MIN_MEM 이상인지 체크 -> MIN_MEM보다 작으면 에러 발생시킴(미완)
CREATE OR REPLACE TRIGGER TRG_STD_OPEN_INSERT
    BEFORE
    INSERT ON TBL_STUDY_OPEN
    FOR EACH ROW
DECLARE
    V_MIN_MEM TBL_MEMNUM.MEMNUM%TYPE;
    V_MAX_MEM TBL_MEMNUM.MEMNUM%TYPE;    
BEGIN 

    SELECT MEMNUM AS MIN_MEM INTO V_MIN_MEM
    FROM TBL_MEMNUM 
    WHERE MEMNUM_CODE = :NEW.MIN_MEM_CODE;

    SELECT MEMNUM AS MAX_MEM INTO V_MAX_MEM
    FROM TBL_MEMNUM
    WHERE MEMNUM_CODE = :NEW.MAX_MEM_CODE;  

    IF ( V_MAX_MEM < V_MIN_MEM )
        THEN RAISE_APPLICATION_ERROR(-20003, '최대 인원수는 최소 인원수 이상이어야 합니다.');
    END IF;
END;
--==>> Trigger TRG_STD_OPEN_INSERT이(가) 컴파일되었습니다.



--○ 탈퇴 테이블에 INSERT 수행 후 -> 회원 등록 테이블에서 정보 삭제
CREATE OR REPLACE TRIGGER TRG_WDL_INSERT
    AFTER
    INSERT ON TBL_WITHDRAWAL_INFO
    FOR EACH ROW
DECLARE
BEGIN
    DELETE
    FROM TBL_USER_REGISTER
    WHERE USER_CODE = :NEW.USER_CODE;
END;
--==>> Trigger TRG_WDL_INSERT이(가) 컴파일되었습니다.




--○ 스터디 신청 트리거
create or replace TRIGGER TRG_STUDY_APPLY
    BEFORE INSERT OR UPDATE
    ON TBL_STUDY_APPLY
    FOR EACH ROW
DECLARE

C_STUDY_CODE    TBL_STUDY_MEETDAY.STUDY_CODE%TYPE;
C_WEEKDAY_CODE  TBL_STUDY_MEETDAY.WEEKDAY_CODE%TYPE;
C_START_TIME    TBL_STUDY_MEETDAY.START_TIME%TYPE;
C_END_TIME      TBL_STUDY_MEETDAY.END_TIME%TYPE;

N_STUDY_CODE    TBL_STUDY_MEETDAY.STUDY_CODE%TYPE;
N_WEEKDAY_CODE  TBL_STUDY_MEETDAY.WEEKDAY_CODE%TYPE;
N_START_TIME    TBL_STUDY_MEETDAY.START_TIME%TYPE;
N_END_TIME      TBL_STUDY_MEETDAY.END_TIME%TYPE;


OPEN_COUNT      NUMBER;
APPLY_COUNT     NUMBER;
SUSPEND_USER    TBL_WARNING.USER_CODE%TYPE;     -- 계정 정지 내역

MEET_CNT        NUMBER;
TOTAL_CNT       NUMBER;

N_START         NUMBER;
N_END           NUMBER;
C_START         NUMBER;
C_END           NUMBER;

V_CLOSE_DATE    TBL_STUDY_OPEN.CLOSE_DATE%TYPE; -- 신청하려는 스터디의 마감일
CANCEL_COUNT    NUMBER;
TOTAL_COUNT     NUMBER;
BEGIN
    
    SELECT DISTINCT NVL(USER_CODE, NULL) INTO SUSPEND_USER -- 계정 정지 내역  
    FROM TBL_WARNING W, TBL_ACCOUNT_SUSPEND S
    WHERE W.WARNING_CODE = S.WARNING_CODE AND W.USER_CODE = :NEW.USER_CODE;
    
    SELECT COUNT(*) INTO APPLY_COUNT                
    FROM TBL_STUDY_APPLY A, TBL_STUDY_OPEN O
    WHERE A.STUDY_CODE = O.STUDY_CODE AND O.END_DATE>SYSDATE  AND A.USER_CODE = :NEW.USER_CODE;
    
    SELECT COUNT(*) INTO CANCEL_COUNT
    FROM TBL_STUDY_APPLY A, TBL_STUDY_CANCEL C, TBL_STUDY_OPEN O
    WHERE A.APPLY_CODE = C.APPLY_CODE AND A.USER_CODE= :NEW.USER_CODE AND O.STUDY_CODE = A.STUDY_CODE AND O.END_DATE>SYSDATE; 
    
    TOTAL_COUNT := APPLY_COUNT - CANCEL_COUNT;
    
    
    -- 신청하려는 스터디의 마감일
    SELECT CLOSE_DATE INTO V_CLOSE_DATE
    FROM TBL_STUDY_OPEN
    WHERE STUDY_CODE = :NEW.STUDY_CODE;
    
    IF(SUSPEND_USER IS NOT NULL)
    THEN
        RAISE_APPLICATION_ERROR(-20008, '계정 정지된 사용자입니다.');
    END IF;
    
    
    IF(TOTAL_COUNT >= 3)
    THEN 
        RAISE_APPLICATION_ERROR(-20002,'이미 3개의 스터디에 참여중입니다.'); 
    END IF;    
   
    
    IF( TO_DATE(V_CLOSE_DATE, 'YYYY-MM-DD') < TO_DATE(:NEW.APPLY_DATE, 'YYYY-MM-DD') )
        THEN 
            RAISE_APPLICATION_ERROR(-20005, '이미 마감된 스터디는 신청할 수 없습니다.');
    END IF;
    
    
   
   
   
    SELECT COUNT(*) INTO MEET_CNT
    FROM TBL_STUDY_MEETDAY
    WHERE STUDY_CODE = :NEW.STUDY_CODE;
    
    SELECT COUNT(*) INTO TOTAL_CNT
    FROM TBL_STUDY_OPEN O, TBL_STUDY_MEETDAY M, TBL_STUDY_APPLY A
    WHERE O.STUDY_CODE = M.STUDY_CODE AND A.STUDY_CODE = O.STUDY_CODE 
    AND O.END_DATE<SYSDATE AND A.USER_CODE = :NEW.USER_CODE;
        
    FOR I IN 1..MEET_CNT LOOP

    SELECT STUDY_CODE, WEEKDAY_CODE, START_TIME, END_TIME INTO N_STUDY_CODE, N_WEEKDAY_CODE, N_START_TIME, N_END_TIME
    FROM (SELECT ROWNUM AS CNT1, STUDY_CODE, WEEKDAY_CODE, START_TIME, END_TIME
          FROM TBL_STUDY_MEETDAY
          WHERE STUDY_CODE = :NEW.STUDY_CODE)
    WHERE CNT1 = I;
    
    N_START := TO_NUMBER(SUBSTR(N_START_TIME,1,2)||SUBSTR(N_START_TIME,4,2));
    N_END := TO_NUMBER(SUBSTR(N_END_TIME,1,2)||SUBSTR(N_END_TIME,4,2));
    
        FOR J IN 1..TOTAL_CNT LOOP
        
            SELECT STUDY_CODE, WEEKDAY_CODE, START_TIME, END_TIME INTO C_STUDY_CODE, C_WEEKDAY_CODE, C_START_TIME, C_END_TIME
            FROM (SELECT ROWNUM AS CNT2, M.STUDY_CODE, M.WEEKDAY_CODE, M.START_TIME, M.END_TIME
                  FROM TBL_STUDY_OPEN O, TBL_STUDY_MEETDAY M, TBL_STUDY_APPLY A
                  WHERE O.STUDY_CODE = M.STUDY_CODE AND A.STUDY_CODE = O.STUDY_CODE 
                  AND O.END_DATE<SYSDATE AND A.USER_CODE = :NEW.USER_CODE)
            WHERE CNT2= J;
            
            C_START := TO_NUMBER(SUBSTR(C_START_TIME,1,2)||SUBSTR(C_START_TIME,4,2));
            C_END := TO_NUMBER(SUBSTR(C_END_TIME,1,2)||SUBSTR(C_END_TIME,4,2));
            
            IF(N_STUDY_CODE = C_STUDY_CODE)
            THEN
                IF(N_WEEKDAY_CODE = C_WEEKDAY_CODE)
                THEN
                    IF((N_START >= C_START AND N_START <= C_END) OR (N_END>=C_START AND N_END <= C_END))
                    THEN
                        RAISE_APPLICATION_ERROR(-20009, '수정된 스터디와 기간, 요일, 시간이 겹치는 스터디가 있어 신청을 확인할 수 없습니다.');
                    END IF; 
                END IF;
            END IF;
        
        END LOOP;
    
    END LOOP;
    
    
    --EXCEPTION
    --WHEN no_data_found THEN NULL;
    
END;